call plug#begin('~/.vim/plugged')

Plug 'flazz/vim-colorschemes'
Plug 'gabesoft/vim-ags'

Plug 'benmills/vimux'

Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'thomasfaingnaert/vim-lsp-snippets'
Plug 'thomasfaingnaert/vim-lsp-ultisnips'

Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'

call plug#end()

colorscheme gruvbox


" NerdTree
let NERDTreeIgnore = ['\.pyc$']
let g:NERDTreeChDirMode = 1
let g:nerdtree_tabs_open_on_console_startup = 1
let g:nerdtree_tabs_open_on_gui_startup = 1
map <Leader>N <plug>NERDTreeTabsToggle<CR>
map <F9> :NERDTreeToggle<CR>


" Wildmenu settings
set wildmenu
set wildmode=list:longest,full
set wildignore=*.swp,*.swo,*.class

" Key mappings
let mapleader=","

nnoremap <leader>vi :tabe ~/.vimrc<CR>
nnoremap <leader>do :tabe ~/.dotfiles<CR>
nnoremap <leader>src :source ~/.vimrc<CR>
noremap <leader>b <ESC>:set wrap!<CR>

" Settings
set number
set pastetoggle=<F8>
set relativenumber
set clipboard=unnamed
set bs=indent,eol,start		" allow backspaces over everything

" tab settings
set expandtab
set ts=4
set shiftwidth=4
set softtabstop=4

" search
set ignorecase
set smartcase
set incsearch
set hlsearch

inoremap jk <esc>
nnoremap ; :

map <leader>q <ESC><ESC>:q<CR>
map <leader>! <ESC><ESC>:q!<CR>

" copy and paste
noremap <leader>y "*y
noremap <leader>p "*p

" Search for the word under cursor
nnoremap <Leader>s :Ags<Space><C-R>=expand('<cword>')<CR><CR>
" Search for the visually selected text
vnoremap <Leader>s y:Ags<Space><C-R>='"' . escape(@", '"*?()[]{}.') . '"'<CR><CR>
" Run Ags
nnoremap <Leader>a :Ags<Space>
" Quit Ags
nnoremap <Leader><Leader>a :AgsQuit<CR>

" Vimux
function! _nose_test_search(fragment)
  let line_num = search(a:fragment, "bs")
  if line_num > 0
    return split(split(getline(line_num), " ")[1], "(")[0]
  else
    return ""
  endif
endfunction

function! RunNoseTestFocused()
  let test_class = _nose_test_search("class ")
  let test_name = _nose_test_search("def test_")

  if test_class == "" || test_name == ""
    echoerr "Couldn't find class and test name to run focused test."
    return
  endif
  VimuxRunCommand("nosetests -s ".expand("%").":".test_class.".".test_name)
endfunction

nmap <silent> <leader>T :VimuxRunCommand("nosetests -s ".expand("%"))<CR>
nmap <silent> <leader>t :call RunNoseTestFocused()<CR>


" window navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" correct vim color in tmux
" https://github.com/tmux/tmux/issues/699#issuecomment-269572025
set background=dark
set t_Co=256

" UltiSnips
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" do not exit from visual mode when shifting
" " (gv : select the preivous area)
vnoremap < <gv
vnoremap > >gv

autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx

nmap <leader><space> :noh<CR>

if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'allowlist': ['python'],
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
