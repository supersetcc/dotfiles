call plug#begin('~/.vim/plugged')

Plug 'flazz/vim-colorschemes'
Plug 'gabesoft/vim-ags'

Plug 'benmills/vimux'

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'

Plug 'tpope/vim-fugitive'

Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

"Plug 'tpope/vim-surround'
Plug 'Yggdroot/indentLine'
Plug 'mg979/vim-visual-multi', {'branch': 'master'}

Plug 'pangloss/vim-javascript'
Plug 'chemzqm/vim-jsx-improve'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'b4b4r07/vim-sqlfmt'
Plug 'hashivim/vim-terraform'

Plug 'Vimjas/vim-python-pep8-indent'

Plug 'zivyangll/git-blame.vim'
Plug 'wakatime/vim-wakatime'

Plug 'mileszs/ack.vim'

Plug 'junegunn/fzf'

call plug#end()

colorscheme gruvbox


" NerdTree
let NERDTreeIgnore = ['\.pyc$','\.DS_Store','\.swp$','__pycache__']
let g:NERDTreeChDirMode = 1
let g:nerdtree_tabs_open_on_console_startup = 1
let g:nerdtree_tabs_open_on_gui_startup = 1
map <Leader>N <plug>NERDTreeTabsToggle<CR>
map <F9> :NERDTreeToggle<CR>


" Wildmenu settings
set wildmenu
set wildmode=list:longest,full
set wildignore=*.swp,*.swo,*.class
set nobackup
set nowritebackup 
set noswapfile

" Key mappings
let mapleader=","

nnoremap <leader>vi :tabe ~/.vimrc<CR>
nnoremap <leader>do :tabe ~/.dotfiles<CR>
nnoremap <leader>src :source ~/.vimrc<CR>
noremap <leader>b <ESC>:set wrap!<CR>
noremap <leader>w <ESC>:wa<CR>

function! Refresh()
"  set noconfirm
  execute 'silent bufdo e!' | syntax on
"  set confirm
endfunction

noremap <leader>r :call Refresh()<CR>

" Settings
set number
set pastetoggle=<F8>
set relativenumber
"set clipboard=unnamed      " Using the clipboard as the default register
set bs=indent,eol,start		" allow backspaces over everything
set autoindent
set smartindent

filetype plugin indent on
filetype indent on

" tab settings
set expandtab
set ts=4
set shiftwidth=4
set softtabstop=4

" search
set ignorecase
set smartcase
set incsearch
set hlsearch

inoremap jk <esc>
nnoremap ; :

map <leader>q <ESC><ESC>:q<CR>
map <leader>! <ESC><ESC>:q!<CR>

" copy and paste
noremap <leader>y "*y
noremap <leader>p "*p

" Search for the word under cursor
nnoremap <Leader>s :Ags<Space><C-R>=expand('<cword>')<CR><CR>
" Search for the visually selected text
vnoremap <Leader>s y:Ags<Space><C-R>='"' . escape(@", '"*?()[]{}.') . '"'<CR><CR>

" Run Ags
nnoremap <Leader>a :Ags<Space>
" Quit Ags
nnoremap <Leader><Leader>a :AgsQuit<CR>

" Vimux
function _nose_test_search(fragment)
  let line_num = search(a:fragment, "bn") " help search()
  if line_num > 0
    return split(split(getline(line_num), " ")[1], "(")[0]
  else
    return ""
  endif
endfunction

function! RunNoseTestFocused()
  let test_class = _nose_test_search("class ")
  let test_name = _nose_test_search("def test_")

  if test_class == "" || test_name == ""
    echoerr "Couldn't find class and test name to run focused test."
    return
  endif
  VimuxRunCommand("nosetests -s ".expand("%").":".test_class.".".test_name)
endfunction

nmap <silent> <leader>T :VimuxRunCommand("nosetests -s ".expand("%"))<CR>
nmap <silent> <leader>t :call RunNoseTestFocused()<CR>
nmap <silent> <leader>j :%!python -m json.tool<CR>

nmap <leader><space> :noh<CR>

" window navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" correct vim color in tmux
" https://github.com/tmux/tmux/issues/699#issuecomment-269572025
set background=dark
set t_Co=256

" UltiSnips
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsEditSplit="vertical"

autocmd FileType javascript UltiSnipsAddFiletypes javascript-es6-react
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx


" do not exit from visual mode when shifting
" " (gv : select the preivous area)
vnoremap < <gv
vnoremap > >gv

nnoremap <silent> <leader>dp V:diffput<cr>
nnoremap <silent> <leader>dg V:diffget<cr>

" FORMATTERS
au FileType javascript setlocal formatprg=prettier
au FileType javascript.jsx setlocal formatprg=prettier
au FileType typescript setlocal formatprg=prettier\ --parser\ typescript
au FileType html setlocal formatprg=js-beautify\ --type\ html
au FileType scss setlocal formatprg=prettier\ --parser\ css
au FileType css setlocal formatprg=prettier\ --parser\ css

" SQL Format
let g:sqlfmt_command = "sqlformat"
let g:sqlfmt_options = "-r -k upper"

nnoremap <Leader>g :<C-u>call gitblame#echo()<CR>

" transparent background
hi Normal guibg=NONE ctermbg=NONE

" Go to tab by number
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>

nnoremap <S-Tab> :tabprevious<CR>
nnoremap <Tab> :tabnext<CR>

" folding
set nofoldenable
nnoremap <space> za
let $unrol=1
function UnrolMe()
if $unrol==0
    :exe "normal zR"
    let $unrol=1
else
    :exe "normal zM"
    let $unrol=0
endif
endfunction
nnoremap <F2> :call UnrolMe()<CR>

" reload
nnoremap <F5> :e<CR>


" highlight
let python_highlight_all = 1

" visual multi
let g:VM_mouse_mappings = 1

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>
silent! set ideajoin

set splitbelow
